<?php

/**
 * @file
 * Contains friends.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Link;

/**
 * Implements hook_help().
 */
function friends_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the friends module.
    case 'help.page.friends':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Enables users to connect with each other be becoming friends') . '</p>';
      return $output;

    default:
  }
}


/**
 * Implements hook_entity_update().
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The entity.
 *
 */
function friends_entity_update(EntityInterface $entity) {
  $instance = 'update_entity_action';
  \Drupal::service('plugin.manager.activity_action.processor')
    ->createInstance($instance)
    ->create($entity);
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for activity--notification templates.
 */
function friends_theme_suggestions_activity_alter(array &$suggestions, array $vars){
  $activity = $vars['elements']['#activity'];
  $activity_type = $activity->get('field_activity_entity')->target_type;
  $suggestions[] = 'activity__' . $activity_type . '__notification';
  if($activity_type != 'friends') {
    return;
  }
  $friendRequest = $activity->get('field_activity_entity')->entity;
  $suggestions[] = 'activity__' . $activity_type . '__' . $friendRequest->get('friends_status')->value . '__notification';
}

/**
 *  Implements hook_theme
 */
function friends_theme() {
  return [
    'activity__friends__notification' => [
      'base hook' => 'activity'
    ]
  ];
}


function friends_preprocess_activity(&$vars) {
  $activity = $vars['elements']['#activity'];
  $activity_type = $activity->get('field_activity_entity')->target_type;
  if($activity_type != 'friends') {
    return;
  }
  $friendsService = \Drupal::service('friends.default');
  $friendRequest = $activity->get('field_activity_entity')->entity;
  $message = $activity->get('field_activity_message')->entity;
  $message_template = $message->getTemplate();

  if($message_template->id() == 'respond_friends') {
    $storage = \Drupal::entityTypeManager()->getStorage('profile');
    if (!empty($storage)) {
      $recipient = $friendRequest->getRecipient();
      $user_profile = $storage->loadByUser($recipient, 'profile');
      if ($user_profile) {
        $content = \Drupal::entityTypeManager()
          ->getViewBuilder('profile')
          ->view($user_profile, 'compact_notification');
          $vars['actor'] = $content;
      }
    }
  }

  $vars['status'] = $friendRequest->get('friends_status')->value;

  // Add status update buttons only if friend request is pending
  if($vars['status'] != 'pending') {
    return;
  }
  $options = [
    'attributes'=> [
      'class' => [
        'use-ajax',
        'btn',
        'btn-primary',
        'button',
        'button--primary',
        'waves-effect',
        'waves-btn',
        'waves-light',
      ]
    ]
  ];
  foreach ($friendsService->getAllowedStatus() as $key => $value) {
    $vars['status_links'][$key] = Link::fromTextAndUrl(
        $value,
        $friendRequest->getStatusUrl($key, $options)
      )->toRenderable();
  }
}
